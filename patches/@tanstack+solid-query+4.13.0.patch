# generated by patch-package
#
# declared package:
#   @tanstack/solid-query: 4.13.0
#
diff --git a/node_modules/@tanstack/solid-query/build/lib/createQuery.esm.js b/node_modules/@tanstack/solid-query/build/lib/createQuery.esm.js
index 88ded1d..57a5f98 100644
--- a/node_modules/@tanstack/solid-query/build/lib/createQuery.esm.js
+++ b/node_modules/@tanstack/solid-query/build/lib/createQuery.esm.js
@@ -12,7 +12,13 @@ import { createBaseQuery } from './createBaseQuery.esm.js';
 function createQuery(arg1, arg2, arg3) {
   // The parseQuery Args functions helps normalize the arguments into the correct form.
   // Whatever the parameters are, they are normalized into the correct form.
-  const [parsedOptions, setParsedOptions] = createStore(parseQueryArgs(arg1, arg2, arg3)); // Watch for changes in the options and update the parsed options.
+
+  //const [parsedOptions, setParsedOptions] = createStore(parseQueryArgs(arg1, arg2, arg3)); // Watch for changes in the options and update the parsed options.
+
+  const parsedOptionsValue = utils.parseQueryArgs(arg1, arg2, arg3);
+  console.log('createQuery: parsedOptionsValue', parsedOptionsValue)
+  // TODO rename: parsedOptions -> getParsedOptions
+  const [parsedOptions, setParsedOptions] = store.createStore(parsedOptionsValue); // Watch for changes in the options and update the parsed options.
 
   createComputed(() => {
     const newParsedOptions = parseQueryArgs(arg1, arg2, arg3);
diff --git a/node_modules/@tanstack/solid-query/build/lib/createQuery.js b/node_modules/@tanstack/solid-query/build/lib/createQuery.js
index 174cfc5..13c3231 100644
--- a/node_modules/@tanstack/solid-query/build/lib/createQuery.js
+++ b/node_modules/@tanstack/solid-query/build/lib/createQuery.js
@@ -16,7 +16,10 @@ var createBaseQuery = require('./createBaseQuery.js');
 function createQuery(arg1, arg2, arg3) {
   // The parseQuery Args functions helps normalize the arguments into the correct form.
   // Whatever the parameters are, they are normalized into the correct form.
-  const [parsedOptions, setParsedOptions] = store.createStore(utils.parseQueryArgs(arg1, arg2, arg3)); // Watch for changes in the options and update the parsed options.
+  const parsedOptionsValue = utils.parseQueryArgs(arg1, arg2, arg3);
+  console.log('createQuery: parsedOptionsValue', parsedOptionsValue)
+  // TODO rename: parsedOptions -> getParsedOptions
+  const [parsedOptions, setParsedOptions] = store.createStore(parsedOptionsValue); // Watch for changes in the options and update the parsed options.
 
   solidJs.createComputed(() => {
     const newParsedOptions = utils.parseQueryArgs(arg1, arg2, arg3);
diff --git a/node_modules/@tanstack/solid-query/build/lib/createQuery.mjs b/node_modules/@tanstack/solid-query/build/lib/createQuery.mjs
index 7c65883..99d789d 100644
--- a/node_modules/@tanstack/solid-query/build/lib/createQuery.mjs
+++ b/node_modules/@tanstack/solid-query/build/lib/createQuery.mjs
@@ -12,7 +12,13 @@ import { createBaseQuery } from './createBaseQuery.mjs';
 function createQuery(arg1, arg2, arg3) {
   // The parseQuery Args functions helps normalize the arguments into the correct form.
   // Whatever the parameters are, they are normalized into the correct form.
-  const [parsedOptions, setParsedOptions] = createStore(parseQueryArgs(arg1, arg2, arg3)); // Watch for changes in the options and update the parsed options.
+
+  //const [parsedOptions, setParsedOptions] = createStore(parseQueryArgs(arg1, arg2, arg3)); // Watch for changes in the options and update the parsed options.
+
+  const parsedOptionsValue = utils.parseQueryArgs(arg1, arg2, arg3);
+  console.log('createQuery: parsedOptionsValue', parsedOptionsValue)
+  // TODO rename: parsedOptions -> getParsedOptions
+  const [parsedOptions, setParsedOptions] = store.createStore(parsedOptionsValue); // Watch for changes in the options and update the parsed options.
 
   createComputed(() => {
     const newParsedOptions = parseQueryArgs(arg1, arg2, arg3);
diff --git a/node_modules/@tanstack/solid-query/build/solid/QueryClientProvider.jsx b/node_modules/@tanstack/solid-query/build/solid/QueryClientProvider.jsx
index fc7a09a..5ad60c3 100644
--- a/node_modules/@tanstack/solid-query/build/solid/QueryClientProvider.jsx
+++ b/node_modules/@tanstack/solid-query/build/solid/QueryClientProvider.jsx
@@ -9,19 +9,44 @@ const QueryClientSharingContext = createContext(false);
 // all use the same **instance** of context, regardless
 // of module scoping.
 function getQueryClientContext(context, contextSharing) {
+
     if (context) {
+  //console.log(`QueryClientProvider getQueryClientContext: context from arg`)
         return context;
     }
+
+  //console.log(`QueryClientProvider getQueryClientContext: contextSharing`, contextSharing) // false
     if (contextSharing && typeof window !== 'undefined') {
         if (!window.SolidQueryClientContext) {
+      //console.log(`QueryClientProvider getQueryClientContext: set window.SolidQueryClientContext`)
             window.SolidQueryClientContext = defaultContext;
         }
+
+    //console.log(`QueryClientProvider getQueryClientContext: return window.SolidQueryClientContext`)
         return window.SolidQueryClientContext;
     }
+
+  //console.log(`QueryClientProvider getQueryClientContext: return defaultContext`)
     return defaultContext;
 }
+
+
+
 export const useQueryClient = ({ context } = {}) => {
-    const queryClient = useContext(getQueryClientContext(context, useContext(QueryClientSharingContext)));
+
+  // FIXME
+  //const queryClient = useContext(getQueryClientContext(context, useContext(QueryClientSharingContext)));
+
+  //console.log(`useQueryClient context`, context)
+
+  const u = useContext(QueryClientSharingContext)
+  //console.log(`useQueryClient useContext?`, u)
+  const c = getQueryClientContext(context, u)
+  //console.log(`useQueryClient queryClientContext`, c)
+  const queryClient = useContext(c);
+  // FIXME queryClient === undefined
+  //console.log(`useQueryClient queryClient`, queryClient)
+
     if (!queryClient) {
         throw new Error('No QueryClient set, use QueryClientProvider to set one');
     }
diff --git a/node_modules/@tanstack/solid-query/build/solid/createBaseQuery.js b/node_modules/@tanstack/solid-query/build/solid/createBaseQuery.js
index 6665b9c..8c5d1a5 100644
--- a/node_modules/@tanstack/solid-query/build/solid/createBaseQuery.js
+++ b/node_modules/@tanstack/solid-query/build/solid/createBaseQuery.js
@@ -2,12 +2,35 @@ import { useQueryClient } from './QueryClientProvider';
 import { onMount, onCleanup, createComputed, createResource, on, batch, } from 'solid-js';
 import { createStore, unwrap } from 'solid-js/store';
 import { shouldThrowError } from './utils';
+
+// workaround ...
+// TODO more generic
+function cleanupQueryKeyProp(query) {
+    //return // debug
+
+    // Proxy -> Array
+    query.queryKey = [ ...query.queryKey ]
+    // Proxy -> Object
+    query.queryKey[1] = { ...query.queryKey[1] }
+}
+
 // Base Query Function that is used to create the query.
 export function createBaseQuery(options, Observer) {
     const queryClient = useQueryClient({ context: options.context });
     const emptyData = Symbol('empty');
+    // TODO(milahu): cleanup options?
+    // TODO(milahu): remove solidjs Proxy objects from options?
+    // TODO(milahu): Observer?
+    // NOTE(milahu): options is a Proxy
+    // NOTE(milahu): defaultedOptions is an object
+    // NOTE(milahu): defaultedOptions.queryKey is a Proxy
     const defaultedOptions = queryClient.defaultQueryOptions(options);
     defaultedOptions._optimisticResults = 'optimistic';
+    console.log('@tanstack/solid-query/build/solid/createBaseQuery.js init observer: options', options)
+
+    cleanupQueryKeyProp(defaultedOptions)
+    console.log('@tanstack/solid-query/build/solid/createBaseQuery.js init observer: defaultedOptions', defaultedOptions)
+
     const observer = new Observer(queryClient, defaultedOptions);
     const [state, setState] = createStore(
     // @ts-ignore
@@ -53,10 +76,18 @@ export function createBaseQuery(options, Observer) {
     });
     onCleanup(() => unsubscribe());
     onMount(() => {
+        // TODO(milahu): cleanup options?
+        // redundant?
+        //cleanupQueryKeyProp(defaultedOptions)
+        console.log('@tanstack/solid-query/build/solid/createBaseQuery.js onMount: defaultedOptions', defaultedOptions)
         observer.setOptions(defaultedOptions, { listeners: false });
     });
+    // NOTE(milahu): this is reactive to options
     createComputed(() => {
         const newDefaultedOptions = queryClient.defaultQueryOptions(options);
+        // TODO(milahu): cleanup options?
+        cleanupQueryKeyProp(newDefaultedOptions)
+        console.log('@tanstack/solid-query/build/solid/createBaseQuery.js createComputed(options): newDefaultedOptions', newDefaultedOptions)
         observer.setOptions(newDefaultedOptions);
     });
     createComputed(on(() => state.status, () => {
diff --git a/node_modules/@tanstack/solid-query/build/solid/createQuery.js b/node_modules/@tanstack/solid-query/build/solid/createQuery.js
index 7219b1e..8592864 100644
--- a/node_modules/@tanstack/solid-query/build/solid/createQuery.js
+++ b/node_modules/@tanstack/solid-query/build/solid/createQuery.js
@@ -6,8 +6,15 @@ import { createBaseQuery } from './createBaseQuery';
 export function createQuery(arg1, arg2, arg3) {
     // The parseQuery Args functions helps normalize the arguments into the correct form.
     // Whatever the parameters are, they are normalized into the correct form.
-    const [parsedOptions, setParsedOptions] = createStore(parseQueryArgs(arg1, arg2, arg3));
+    
+    //const [parsedOptions, setParsedOptions] = createStore(parseQueryArgs(arg1, arg2, arg3));
     // Watch for changes in the options and update the parsed options.
+
+  const parsedOptionsValue = parseQueryArgs(arg1, arg2, arg3);
+  console.log('createQuery: parsedOptionsValue', parsedOptionsValue)
+  // note: strictly speaking: parsedOptions -> getParsedOptions
+  const [parsedOptions, setParsedOptions] = createStore(parsedOptionsValue); // Watch for changes in the options and update the parsed options.
+
     createComputed(() => {
         const newParsedOptions = parseQueryArgs(arg1, arg2, arg3);
         setParsedOptions(newParsedOptions);
