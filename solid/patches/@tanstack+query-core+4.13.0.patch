# generated by patch-package
#
# declared package:
#   @tanstack/query-core: 4.13.0
#
diff --git a/node_modules/@tanstack/query-core/build/lib/queryObserver.esm.js b/node_modules/@tanstack/query-core/build/lib/queryObserver.esm.js
index 7a9d8b4..0c05185 100644
--- a/node_modules/@tanstack/query-core/build/lib/queryObserver.esm.js
+++ b/node_modules/@tanstack/query-core/build/lib/queryObserver.esm.js
@@ -25,7 +25,36 @@ class QueryObserver extends Subscribable {
       this.currentQuery.addObserver(this);
 
       if (shouldFetchOnMount(this.currentQuery, this.options)) {
-        this.executeFetch();
+
+        // fetch later if queryClient is paused
+
+        // TODO sync API prop names
+        // https://github.com/TanStack/query/discussions/4365
+        const queryClient = this.client
+
+        if (!queryClient.paused) {
+          // fetch now
+          this.executeFetch();
+        }
+        else {
+          // queryClient is paused -> fetch later
+          //console.log('QueryObserver.onSubscribe: queryClient is paused -> fetch later')
+          if (!queryClient.afterPersistQueryClientRestore) {
+            queryClient.afterPersistQueryClientRestore = []
+          }
+          // fetch later in node_modules/@tanstack/query-persist-client-core/build/lib/persist.esm.js
+          queryClient.afterPersistQueryClientRestore.push(() => {
+            // check again
+            if (shouldFetchOnMount(this.currentQuery, this.options)) {
+              //console.log('QueryObserver.onSubscribe after restore: executeFetch')
+              this.executeFetch();
+            }
+            else {
+              //console.log('QueryObserver.onSubscribe after restore: dont executeFetch')
+            }
+          })
+        }
+
       }
 
       this.updateTimers();
